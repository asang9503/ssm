<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns="http://java.sun.com/xml/ns/javaee"
	xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd"
	id="WebApp_ID" version="3.0">
	<display-name>zz805ssm</display-name>

	<!-- 在ssm中服务器启动运行了两个容器，一个是spring.xml对应的在监听器中启动的ioc容器， 还有一个是springmvc在核心控制器中初始化的一个ioc容器。
	
	
	两个容器允许同时出现，并且有包含关系，springmvc容器是spring容器的子集，在springmvc环境的中能够使用spring容器创建的bean。
	但是如果他们两个指定的扫描包一样，会出现重复扫描的情况。引发1重复创建bean对象2造成事务不生效的情况。
	
	解决思路:两个容器分开去进行扫描，springmvc只扫描controller。spring扫描dao和service和其他普通java组件。
	同时springmvc可以接收spring容器的注入。
	配置方案:
	1spring排除contoller，springmvc排除service
	2直接让他们分开进行扫描
	为service和dao分别指定配置文件，在配置文件中分开扫描dao层和service层。
	在web.xml中进行spring配置文件指定的时候可以通过通配符
	
	 -->


	<welcome-file-list>
		<welcome-file>index.html</welcome-file>
		<welcome-file>index.htm</welcome-file>
		<welcome-file>index.jsp</welcome-file>
		<welcome-file>default.html</welcome-file>
		<welcome-file>default.htm</welcome-file>
		<welcome-file>default.jsp</welcome-file>
	</welcome-file-list>

	<!-- 监听serviletcontext对象，application启动的时候自动ioc容器初始化 -->

	<!-- 在web环境下不需要开发者手动的初始化ico容器了 -->
	<listener>
		<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
	</listener>

	<!-- 为监听器设置初始化ioc容器所需要的路径 -->
	<context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>classpath:spring_*.xml</param-value>
	</context-param>


	<!-- springmvc提供的统一编码的过滤器，就不需要程序员自己创建编码过滤器 -->
	<filter>
		<filter-name>encodingFilter</filter-name>
		<filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>

		<init-param>
			<param-name>encoding</param-name>
			<param-value>UTF-8</param-value>
		</init-param>
		<init-param>
			<param-name>forceEncoding</param-name>
			<param-value>true </param-value>
		</init-param>
	</filter>
	<filter-mapping>
		<filter-name>encodingFilter</filter-name>
		<url-pattern>/</url-pattern>
	</filter-mapping>
	<!-- 配置SpringMVC核心控制器： -->
	<!-- 是一个springmvc提供的一个servlet，用于处理用户请求的，我们叫他核心控制器 -->
	<servlet>
		<servlet-name>springDispatcherServlet</servlet-name>
		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
		<init-param>
			<param-name>contextConfigLocation</param-name>
			<param-value>classPath:springmvc.xml</param-value>
		</init-param>
		<load-on-startup>1</load-on-startup>
	</servlet>
	<servlet-mapping>
		<servlet-name>springDispatcherServlet</servlet-name>
		<url-pattern>/</url-pattern>
	</servlet-mapping>
</web-app>